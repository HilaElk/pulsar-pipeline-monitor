openapi: 3.0.0
servers:
  - url: 'http://petstore.swagger.io/v2'
info:
  description: Creates a heat map for pipelines
  version: 1.0.0
  title: Pipeline heat map
  termsOfService: ''
  contact:
    email: ofers@tikalk.com
    name: Ofer
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
tags:
  - name: pipeline
    description: Operations about a named pipeline
paths:
  '/pipeline/{name}':
    get:
      tags:
        - pipeline
      summary: Creates a new pipeline
      description: multiple topics can be provided for the new pipeline
      operationId: getPipeline
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: the name of the pipeline
          minLength: '3'
          maxLength: '20'
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security: []
      deprecated: false
    post:
      summary: ''
      description: ''
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: The name of the pipeline
          minLength: '3'
          maxLength: '120'
      operationId: createPipeline
      responses:
        default:
          description: Default response
      requestBody:
        content:
          application/json:
            required: false
            schema: {}
        description: List of topics in the pipeline
        required: true
    delete:
      summary: ''
      description: ''
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: The name of the pipeline
          minLength: '3'
          maxLength: '20'
      operationId: deletePipeline
      responses:
        default:
          description: Default response
      tags:
        - pipeline
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes: {}
  links: {}
  callbacks: {}
security: []
